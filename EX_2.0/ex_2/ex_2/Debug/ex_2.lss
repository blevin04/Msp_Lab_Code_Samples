
ex_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000025e  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  00000302  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000901  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000787  00000000  00000000  00000cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000361  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  000017a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000416  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026d  00000000  00000000  00001c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001eeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
  9e:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <vision_persist>:
int i = 0; 
int j = 0; 

/* A function to act as a persistence of vision delay */
void vision_persist(){ 
    int delay = delayvalue; 
  a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    while (0 < delay){
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	34 f4       	brge	.+12     	; 0xc0 <vision_persist+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	25 e0       	ldi	r18, 0x05	; 5
  b6:	2a 95       	dec	r18
  b8:	f1 f7       	brne	.-4      	; 0xb6 <vision_persist+0x10>
  ba:	00 00       	nop
        _delay_us(1); 
        --delay; 
  bc:	01 97       	sbiw	r24, 0x01	; 1
int j = 0; 

/* A function to act as a persistence of vision delay */
void vision_persist(){ 
    int delay = delayvalue; 
    while (0 < delay){
  be:	d1 f7       	brne	.-12     	; 0xb4 <vision_persist+0xe>
  c0:	08 95       	ret

000000c2 <sevseg_refreshDisplay>:
    } 
} 

/* A function to reload the timer initial value after the timer overflows */ 
void sevseg_refreshDisplay(){ 
     TCNT1L = 0x00; /* Load TCNT1, count for a shorter interval */
  c2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     TCNT1H = 0x00;
  c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     TCCR1B |= (1<<CS10); /* Start timer1 with no prescaler for higher frequency */
  ca:	e1 e8       	ldi	r30, 0x81	; 129
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	80 83       	st	Z, r24
     TIMSK1 |= (1<<TOIE1); /* Enable Timer1 overflow interrupts */
  d4:	ef e6       	ldi	r30, 0x6F	; 111
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	80 83       	st	Z, r24
  de:	08 95       	ret

000000e0 <displayLED>:
} 

void displayLED(int input){ 
    /* Function to display a number in the LED */ 
    char BH = (PORTB & 0xF0); 
  e0:	25 b1       	in	r18, 0x05	; 5
    char BL = (display[input] & 0x0F); 
  e2:	fc 01       	movw	r30, r24
  e4:	ea 5f       	subi	r30, 0xFA	; 250
  e6:	fe 4f       	sbci	r31, 0xFE	; 254
    PORTB = (BH | BL);
  e8:	90 81       	ld	r25, Z
  ea:	9f 70       	andi	r25, 0x0F	; 15
  ec:	20 7f       	andi	r18, 0xF0	; 240
  ee:	29 2b       	or	r18, r25
  f0:	25 b9       	out	0x05, r18	; 5
    char DL = (PORTD & 0x0F);
  f2:	9b b1       	in	r25, 0x0b	; 11
    char DH = (display[input] & 0xF0);
    PORTD = (DH | DL); 
  f4:	80 81       	ld	r24, Z
  f6:	28 2f       	mov	r18, r24
  f8:	20 7f       	andi	r18, 0xF0	; 240
  fa:	89 2f       	mov	r24, r25
  fc:	8f 70       	andi	r24, 0x0F	; 15
  fe:	82 2b       	or	r24, r18
 100:	8b b9       	out	0x0b, r24	; 11
 102:	08 95       	ret

00000104 <__vector_13>:
} 

ISR(TIMER1_OVF_vect){ 
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	ef 92       	push	r14
 110:	ff 92       	push	r15
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
    /* Interrupt Service Routine for Timer1 */ 
    PORTB ^= (1<<SEG1); /* Toggle SEG1 */
 132:	25 b1       	in	r18, 0x05	; 5
 134:	0f 2e       	mov	r0, r31
 136:	f4 e0       	ldi	r31, 0x04	; 4
 138:	ef 2e       	mov	r14, r31
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	ff 2e       	mov	r15, r31
 13e:	f0 2d       	mov	r31, r0
 140:	c1 e0       	ldi	r28, 0x01	; 1
 142:	d0 e0       	ldi	r29, 0x00	; 0
 144:	ce 01       	movw	r24, r28
 146:	f7 01       	movw	r30, r14
 148:	00 80       	ld	r0, Z
 14a:	02 c0       	rjmp	.+4      	; 0x150 <__vector_13+0x4c>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <__vector_13+0x48>
 154:	82 27       	eor	r24, r18
 156:	85 b9       	out	0x05, r24	; 5
    PORTB ^= (1<<SEG2); /* Toggle SEG2 */
 158:	25 b1       	in	r18, 0x05	; 5
 15a:	02 e0       	ldi	r16, 0x02	; 2
 15c:	11 e0       	ldi	r17, 0x01	; 1
 15e:	ce 01       	movw	r24, r28
 160:	f8 01       	movw	r30, r16
 162:	00 80       	ld	r0, Z
 164:	02 c0       	rjmp	.+4      	; 0x16a <__vector_13+0x66>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <__vector_13+0x62>
 16e:	82 27       	eor	r24, r18
 170:	85 b9       	out	0x05, r24	; 5
    displayLED(i); 
 172:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i>
 176:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <i+0x1>
 17a:	0e 94 70 00 	call	0xe0	; 0xe0 <displayLED>
    vision_persist();
 17e:	0e 94 53 00 	call	0xa6	; 0xa6 <vision_persist>
    PORTB ^= (1<<SEG1); /* Toggle SEG1 */
 182:	25 b1       	in	r18, 0x05	; 5
 184:	ce 01       	movw	r24, r28
 186:	f7 01       	movw	r30, r14
 188:	00 80       	ld	r0, Z
 18a:	02 c0       	rjmp	.+4      	; 0x190 <__vector_13+0x8c>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	0a 94       	dec	r0
 192:	e2 f7       	brpl	.-8      	; 0x18c <__vector_13+0x88>
 194:	82 27       	eor	r24, r18
 196:	85 b9       	out	0x05, r24	; 5
    PORTB ^= (1<<SEG2); /* Toggle SEG2 */ 
 198:	85 b1       	in	r24, 0x05	; 5
 19a:	f8 01       	movw	r30, r16
 19c:	00 80       	ld	r0, Z
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <__vector_13+0xa0>
 1a0:	cc 0f       	add	r28, r28
 1a2:	dd 1f       	adc	r29, r29
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <__vector_13+0x9c>
 1a8:	c8 27       	eor	r28, r24
 1aa:	c5 b9       	out	0x05, r28	; 5
    displayLED(j); 
 1ac:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1b0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1b4:	0e 94 70 00 	call	0xe0	; 0xe0 <displayLED>
    vision_persist(); 
 1b8:	0e 94 53 00 	call	0xa6	; 0xa6 <vision_persist>
    sevseg_refreshDisplay(); 
 1bc:	0e 94 61 00 	call	0xc2	; 0xc2 <sevseg_refreshDisplay>
} 
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	bf 91       	pop	r27
 1ca:	af 91       	pop	r26
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	7f 91       	pop	r23
 1d2:	6f 91       	pop	r22
 1d4:	5f 91       	pop	r21
 1d6:	4f 91       	pop	r20
 1d8:	3f 91       	pop	r19
 1da:	2f 91       	pop	r18
 1dc:	1f 91       	pop	r17
 1de:	0f 91       	pop	r16
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <main>:

int main(void){ 
    int count = 0; 
    DDRB |= 0xFF; 
 1ee:	84 b1       	in	r24, 0x04	; 4
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	84 b9       	out	0x04, r24	; 4
    DDRD |= 0xFF; 
 1f4:	9a b1       	in	r25, 0x0a	; 10
 1f6:	8a b9       	out	0x0a, r24	; 10
    PORTB |= (1<<SEG1); 
 1f8:	25 b1       	in	r18, 0x05	; 5
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	00 90 04 01 	lds	r0, 0x0104	; 0x800104 <SEG1>
 202:	02 c0       	rjmp	.+4      	; 0x208 <main+0x1a>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <main+0x16>
 20c:	82 2b       	or	r24, r18
 20e:	85 b9       	out	0x05, r24	; 5
    /***********************************************************************/ 
    /* Interrupt Setup */ 
    sevseg_refreshDisplay();
 210:	0e 94 61 00 	call	0xc2	; 0xc2 <sevseg_refreshDisplay>
    sei(); /* Enable Global Interrupt */ 
 214:	78 94       	sei
    vision_persist(); 
    sevseg_refreshDisplay(); 
} 

int main(void){ 
    int count = 0; 
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
    /***********************************************************************/
    while (1) {
        /* Change this code segment to achieve a 10s countdown */ 
        if(count < 10){
            i = count; 
            j = 9-count;
 21a:	49 e0       	ldi	r20, 0x09	; 9
 21c:	50 e0       	ldi	r21, 0x00	; 0
    sevseg_refreshDisplay();
    sei(); /* Enable Global Interrupt */ 
    /***********************************************************************/
    while (1) {
        /* Change this code segment to achieve a 10s countdown */ 
        if(count < 10){
 21e:	8a 30       	cpi	r24, 0x0A	; 10
 220:	91 05       	cpc	r25, r1
 222:	64 f4       	brge	.+24     	; 0x23c <main+0x4e>
            i = count; 
 224:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <i+0x1>
 228:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <i>
            j = 9-count;
 22c:	9a 01       	movw	r18, r20
 22e:	28 1b       	sub	r18, r24
 230:	39 0b       	sbc	r19, r25
 232:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <__data_end+0x1>
 236:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <__data_end>
            count++; 
 23a:	01 96       	adiw	r24, 0x01	; 1
        }
        if(count == 10){ 
 23c:	8a 30       	cpi	r24, 0x0A	; 10
 23e:	91 05       	cpc	r25, r1
 240:	11 f4       	brne	.+4      	; 0x246 <main+0x58>
            count = 0; 
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 246:	2f ef       	ldi	r18, 0xFF	; 255
 248:	39 e6       	ldi	r19, 0x69	; 105
 24a:	68 e1       	ldi	r22, 0x18	; 24
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	30 40       	sbci	r19, 0x00	; 0
 250:	60 40       	sbci	r22, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <main+0x5e>
 254:	00 c0       	rjmp	.+0      	; 0x256 <main+0x68>
 256:	00 00       	nop
 258:	e2 cf       	rjmp	.-60     	; 0x21e <main+0x30>

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
