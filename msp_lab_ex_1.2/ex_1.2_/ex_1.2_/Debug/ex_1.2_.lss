
ex_1.2_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000013e  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006a  0080006a  000001dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000617  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000568  00000000  00000000  00000887  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000270  00000000  00000000  00000def  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030d  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000004d  00000000  00000000  000013a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000013ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  8a:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <delay1>:
	return 0;
}

void delay1(){
	
	TCNT0 = 0x5F; /* Load TCNT0 with the start value*/ 
  92:	8f e5       	ldi	r24, 0x5F	; 95
  94:	82 bf       	out	0x32, r24	; 50
	TCCR0 = 0x01; /* Timer0, normal mode, no pre-scalar */ 
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	83 bf       	out	0x33, r24	; 51
	while((TIFR&0x01)==0); /* Wait for TOV0 to roll over, i.e. overflow */ 
  9a:	08 b6       	in	r0, 0x38	; 56
  9c:	00 fe       	sbrs	r0, 0
  9e:	fd cf       	rjmp	.-6      	; 0x9a <delay1+0x8>
	TCCR0 = 0; /* set TCCR0 to 0 to stop the timer */ 
  a0:	13 be       	out	0x33, r1	; 51
	TIFR = 0x1;  /* Clear TOV0 flag*/
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	88 bf       	out	0x38, r24	; 56
  a6:	08 95       	ret

000000a8 <main>:

char digits [] = {0x3F ,0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x67};
	int num = 0;
int counter = 0;
int main(void)
{	DDRC |=(0xff);
  a8:	84 b3       	in	r24, 0x14	; 20
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	84 bb       	out	0x14, r24	; 20
	DDRD |=(0xff);
  ae:	91 b3       	in	r25, 0x11	; 17
  b0:	81 bb       	out	0x11, r24	; 17
	
	PORTD |= (1<<PD0);
  b2:	90 9a       	sbi	0x12, 0	; 18
	PORTD |= (1<<PD1);
  b4:	91 9a       	sbi	0x12, 1	; 18
  b6:	09 e6       	ldi	r16, 0x69	; 105
  b8:	10 e0       	ldi	r17, 0x00	; 0
  ba:	c0 e6       	ldi	r28, 0x60	; 96
  bc:	d0 e0       	ldi	r29, 0x00	; 0
    /* Replace with your application code */
    while (1) 
    {
		for (int i = 0; i<9;i++)
		{
			counter = 0;
  be:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x1>
  c2:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
			while(counter <6250){
				disp_port = digits[i];
  c6:	88 81       	ld	r24, Y
  c8:	85 bb       	out	0x15, r24	; 21
				PORTD &=(~1<<PD1);
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	8c 7f       	andi	r24, 0xFC	; 252
  ce:	82 bb       	out	0x12, r24	; 18
				delay1();
  d0:	0e 94 49 00 	call	0x92	; 0x92 <delay1>
				PORTD |= (1<<PD1);
  d4:	91 9a       	sbi	0x12, 1	; 18
				
				delay1();
  d6:	0e 94 49 00 	call	0x92	; 0x92 <delay1>
				disp_port = 0x00;
  da:	15 ba       	out	0x15, r1	; 21
				digit_port = digits[num];
  dc:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <num>
  e0:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <num+0x1>
  e4:	e0 5a       	subi	r30, 0xA0	; 160
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	80 81       	ld	r24, Z
  ea:	82 bb       	out	0x12, r24	; 18
				PORTD &=(~1<<PD0);
  ec:	90 98       	cbi	0x12, 0	; 18
				delay1();
  ee:	0e 94 49 00 	call	0x92	; 0x92 <delay1>
				PORTD |= (1<<PD0);
  f2:	90 9a       	sbi	0x12, 0	; 18
				disp_port = 0x00;
  f4:	15 ba       	out	0x15, r1	; 21
				delay1();
  f6:	0e 94 49 00 	call	0x92	; 0x92 <delay1>
				counter++;
  fa:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  fe:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 108:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
    while (1) 
    {
		for (int i = 0; i<9;i++)
		{
			counter = 0;
			while(counter <6250){
 10c:	8a 36       	cpi	r24, 0x6A	; 106
 10e:	98 41       	sbci	r25, 0x18	; 24
 110:	d4 f2       	brlt	.-76     	; 0xc6 <main+0x1e>
 112:	21 96       	adiw	r28, 0x01	; 1
	PORTD |= (1<<PD0);
	PORTD |= (1<<PD1);
    /* Replace with your application code */
    while (1) 
    {
		for (int i = 0; i<9;i++)
 114:	0c 17       	cp	r16, r28
 116:	1d 07       	cpc	r17, r29
 118:	91 f6       	brne	.-92     	; 0xbe <main+0x16>
				counter++;
			}
			
			
		}
		num++;
 11a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <num>
 11e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <num+0x1>
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <num+0x1>
 128:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <num>
		if (num>9)
 12c:	0a 97       	sbiw	r24, 0x0a	; 10
 12e:	2c f2       	brlt	.-118    	; 0xba <main+0x12>
		{
			num=0;
 130:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <num+0x1>
 134:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <num>
 138:	c0 cf       	rjmp	.-128    	; 0xba <main+0x12>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
